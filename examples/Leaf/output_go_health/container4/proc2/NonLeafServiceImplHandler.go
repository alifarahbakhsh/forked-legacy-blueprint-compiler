// Blueprint: auto-generated by RPCgrpc plugin
package proc2

import (
	"gen-go/leaf"
	"google.golang.org/grpc"
	"context"
	"os"
	"errors"
	"net"
)

type NonLeafServiceImplHandler struct {
	service *NonLeafServiceImplTracer
	leaf.UnimplementedNonLeafServiceImplServer
}
func NewNonLeafServiceImplHandler(old_handler *NonLeafServiceImplTracer,framework string,timeout string) *NonLeafServiceImplHandler {
	handler := &NonLeafServiceImplHandler{service:old_handler}
	return handler
}

func (rpchandler *NonLeafServiceImplHandler) Leaf(ctx context.Context, request *leaf.NonLeafServiceImpl_LeafRequest) (*leaf.NonLeafServiceImpl_LeafResponse, error) {
	ret0,ret1 := rpchandler.service.Leaf(ctx,request.A,request.JaegerTracerTraceCtx)
	response := &leaf.NonLeafServiceImpl_LeafResponse{}
	response.RetVal0 = ret0
	return response,ret1
}

func (rpchandler *NonLeafServiceImplHandler) Run() error {
	addr := os.Getenv("nonleafService_ADDRESS")
	port := os.Getenv("nonleafService_PORT")
	if addr == "" || port == "" {
		return errors.New("Address or Port were not set")
	}
	lis, err := net.Listen("tcp", addr + ":" + port)
	if err != nil {
		return err
	}
	grpcServer := grpc.NewServer()
	leaf.RegisterNonLeafServiceImplServer(grpcServer,rpchandler)
	return grpcServer.Serve(lis)
	
}

