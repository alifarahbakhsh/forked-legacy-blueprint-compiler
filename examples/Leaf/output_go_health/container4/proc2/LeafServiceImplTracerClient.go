// Blueprint: auto-generated by Tracer plugin
package proc2

import (
	"gitlab.mpi-sws.org/cld/blueprint/blueprint-compiler/stdlib/components"
	"context"
	"spec/services"
)

type LeafServiceImplTracerClient struct {
	client *LeafServiceImplRetrier
	tracer components.Tracer
	service_name string
}
func NewLeafServiceImplTracerClient(client *LeafServiceImplRetrier,tracer components.Tracer,service_name string,sampling_rate string) *LeafServiceImplTracerClient {
	return &LeafServiceImplTracerClient{client: client, tracer: tracer, service_name: service_name}
}

func (t *LeafServiceImplTracerClient) Object(ctx context.Context, obj services.LeafObject) (services.LeafObject, error) {
	tp, _ := t.tracer.GetTracerProvider()
	tr := tp.Tracer(t.service_name)
	ctx, span := tr.Start(ctx, "Object")
	defer span.End()
	jaegerTracer_trace_ctx,_ := span.SpanContext().MarshalJSON()
	ret0, err := t.client.Object(ctx, obj, string(jaegerTracer_trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return ret0, err
}

func (t *LeafServiceImplTracerClient) Leaf(ctx context.Context, a int64) (int64, error) {
	tp, _ := t.tracer.GetTracerProvider()
	tr := tp.Tracer(t.service_name)
	ctx, span := tr.Start(ctx, "Leaf")
	defer span.End()
	jaegerTracer_trace_ctx,_ := span.SpanContext().MarshalJSON()
	ret0, err := t.client.Leaf(ctx, a, string(jaegerTracer_trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return ret0, err
}

