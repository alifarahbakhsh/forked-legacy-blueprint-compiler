// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package leaf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeafServiceImplClient is the client API for LeafServiceImpl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeafServiceImplClient interface {
	Leaf(ctx context.Context, in *LeafServiceImpl_LeafRequest, opts ...grpc.CallOption) (*LeafServiceImpl_LeafResponse, error)
	Object(ctx context.Context, in *LeafServiceImpl_ObjectRequest, opts ...grpc.CallOption) (*LeafServiceImpl_ObjectResponse, error)
}

type leafServiceImplClient struct {
	cc grpc.ClientConnInterface
}

func NewLeafServiceImplClient(cc grpc.ClientConnInterface) LeafServiceImplClient {
	return &leafServiceImplClient{cc}
}

func (c *leafServiceImplClient) Leaf(ctx context.Context, in *LeafServiceImpl_LeafRequest, opts ...grpc.CallOption) (*LeafServiceImpl_LeafResponse, error) {
	out := new(LeafServiceImpl_LeafResponse)
	err := c.cc.Invoke(ctx, "/leaf.LeafServiceImpl/Leaf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leafServiceImplClient) Object(ctx context.Context, in *LeafServiceImpl_ObjectRequest, opts ...grpc.CallOption) (*LeafServiceImpl_ObjectResponse, error) {
	out := new(LeafServiceImpl_ObjectResponse)
	err := c.cc.Invoke(ctx, "/leaf.LeafServiceImpl/Object", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeafServiceImplServer is the server API for LeafServiceImpl service.
// All implementations must embed UnimplementedLeafServiceImplServer
// for forward compatibility
type LeafServiceImplServer interface {
	Leaf(context.Context, *LeafServiceImpl_LeafRequest) (*LeafServiceImpl_LeafResponse, error)
	Object(context.Context, *LeafServiceImpl_ObjectRequest) (*LeafServiceImpl_ObjectResponse, error)
	mustEmbedUnimplementedLeafServiceImplServer()
}

// UnimplementedLeafServiceImplServer must be embedded to have forward compatible implementations.
type UnimplementedLeafServiceImplServer struct {
}

func (UnimplementedLeafServiceImplServer) Leaf(context.Context, *LeafServiceImpl_LeafRequest) (*LeafServiceImpl_LeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leaf not implemented")
}
func (UnimplementedLeafServiceImplServer) Object(context.Context, *LeafServiceImpl_ObjectRequest) (*LeafServiceImpl_ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Object not implemented")
}
func (UnimplementedLeafServiceImplServer) mustEmbedUnimplementedLeafServiceImplServer() {}

// UnsafeLeafServiceImplServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeafServiceImplServer will
// result in compilation errors.
type UnsafeLeafServiceImplServer interface {
	mustEmbedUnimplementedLeafServiceImplServer()
}

func RegisterLeafServiceImplServer(s grpc.ServiceRegistrar, srv LeafServiceImplServer) {
	s.RegisterService(&LeafServiceImpl_ServiceDesc, srv)
}

func _LeafServiceImpl_Leaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeafServiceImpl_LeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafServiceImplServer).Leaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaf.LeafServiceImpl/Leaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafServiceImplServer).Leaf(ctx, req.(*LeafServiceImpl_LeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeafServiceImpl_Object_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeafServiceImpl_ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafServiceImplServer).Object(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaf.LeafServiceImpl/Object",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafServiceImplServer).Object(ctx, req.(*LeafServiceImpl_ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeafServiceImpl_ServiceDesc is the grpc.ServiceDesc for LeafServiceImpl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeafServiceImpl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaf.LeafServiceImpl",
	HandlerType: (*LeafServiceImplServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Leaf",
			Handler:    _LeafServiceImpl_Leaf_Handler,
		},
		{
			MethodName: "Object",
			Handler:    _LeafServiceImpl_Object_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaf.proto",
}

// NonLeafServiceImplClient is the client API for NonLeafServiceImpl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NonLeafServiceImplClient interface {
	Leaf(ctx context.Context, in *NonLeafServiceImpl_LeafRequest, opts ...grpc.CallOption) (*NonLeafServiceImpl_LeafResponse, error)
}

type nonLeafServiceImplClient struct {
	cc grpc.ClientConnInterface
}

func NewNonLeafServiceImplClient(cc grpc.ClientConnInterface) NonLeafServiceImplClient {
	return &nonLeafServiceImplClient{cc}
}

func (c *nonLeafServiceImplClient) Leaf(ctx context.Context, in *NonLeafServiceImpl_LeafRequest, opts ...grpc.CallOption) (*NonLeafServiceImpl_LeafResponse, error) {
	out := new(NonLeafServiceImpl_LeafResponse)
	err := c.cc.Invoke(ctx, "/leaf.NonLeafServiceImpl/Leaf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NonLeafServiceImplServer is the server API for NonLeafServiceImpl service.
// All implementations must embed UnimplementedNonLeafServiceImplServer
// for forward compatibility
type NonLeafServiceImplServer interface {
	Leaf(context.Context, *NonLeafServiceImpl_LeafRequest) (*NonLeafServiceImpl_LeafResponse, error)
	mustEmbedUnimplementedNonLeafServiceImplServer()
}

// UnimplementedNonLeafServiceImplServer must be embedded to have forward compatible implementations.
type UnimplementedNonLeafServiceImplServer struct {
}

func (UnimplementedNonLeafServiceImplServer) Leaf(context.Context, *NonLeafServiceImpl_LeafRequest) (*NonLeafServiceImpl_LeafResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leaf not implemented")
}
func (UnimplementedNonLeafServiceImplServer) mustEmbedUnimplementedNonLeafServiceImplServer() {}

// UnsafeNonLeafServiceImplServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NonLeafServiceImplServer will
// result in compilation errors.
type UnsafeNonLeafServiceImplServer interface {
	mustEmbedUnimplementedNonLeafServiceImplServer()
}

func RegisterNonLeafServiceImplServer(s grpc.ServiceRegistrar, srv NonLeafServiceImplServer) {
	s.RegisterService(&NonLeafServiceImpl_ServiceDesc, srv)
}

func _NonLeafServiceImpl_Leaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonLeafServiceImpl_LeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NonLeafServiceImplServer).Leaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaf.NonLeafServiceImpl/Leaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NonLeafServiceImplServer).Leaf(ctx, req.(*NonLeafServiceImpl_LeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NonLeafServiceImpl_ServiceDesc is the grpc.ServiceDesc for NonLeafServiceImpl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NonLeafServiceImpl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaf.NonLeafServiceImpl",
	HandlerType: (*NonLeafServiceImplServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Leaf",
			Handler:    _NonLeafServiceImpl_Leaf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaf.proto",
}
