// Blueprint: auto-generated by Retry plugin
package proc3

import (
	"context"
	"strconv"
	"spec/services"
)

type LeafServiceImplRetrier struct {
	client *LeafServiceImplRPCClient
	max_retries int64
}
func NewLeafServiceImplRetrier(client *LeafServiceImplRPCClient,max_retries string) *LeafServiceImplRetrier {
	max_retries_num, _ := strconv.ParseInt(max_retries, 10, 64)
	return &LeafServiceImplRetrier{client:client, max_retries: max_retries_num}
	
}

func (rm *LeafServiceImplRetrier) Object(ctx context.Context, obj services.LeafObject, jaegerTracer_trace_ctx string) (services.LeafObject, error) {
	var ret_0 services.LeafObject
	var ret_1 error
	var i int64
	for i = 0; i < rm.max_retries; i++ {
		ret_0,ret_1 = rm.client.Object(ctx, obj, jaegerTracer_trace_ctx)
		if ret_1 == nil {
			break
		}
	}
	return ret_0, ret_1
}

func (rm *LeafServiceImplRetrier) Leaf(ctx context.Context, a int64, jaegerTracer_trace_ctx string) (int64, error) {
	var ret_0 int64
	var ret_1 error
	var i int64
	for i = 0; i < rm.max_retries; i++ {
		ret_0,ret_1 = rm.client.Leaf(ctx, a, jaegerTracer_trace_ctx)
		if ret_1 == nil {
			break
		}
	}
	return ret_0, ret_1
}

