// Blueprint: auto-generated by RPCgrpc plugin
package proc3

import (
	"gen-go/leaf"
	"google.golang.org/grpc"
	"context"
	"github.com/jinzhu/copier"
	"os"
	"errors"
	"google.golang.org/grpc/credentials/insecure"
	"time"
	"spec/services"
)

type LeafServiceImplRPCClient struct {
	client leaf.LeafServiceImplClient
	Timeout time.Duration
}
func NewLeafServiceImplRPCClient() (*LeafServiceImplRPCClient, error) {
	addr := os.Getenv("leafService_ADDRESS")
	port := os.Getenv("leafService_PORT")
	if addr == "" || port == "" {
		return nil, errors.New("Address or port were not set")
	}
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err == nil {
		opts = append(opts, grpc.WithTimeout(duration))
	}
	conn, err := grpc.Dial(addr + ":" + port, opts...)
	if err != nil {
		return nil, err
	}
	client := leaf.NewLeafServiceImplClient(conn)
	return &LeafServiceImplRPCClient{client:client, Timeout: duration}, nil
	
}

func (rpcclient *LeafServiceImplRPCClient) Leaf(ctx context.Context, a int64, jaegerTracer_trace_ctx string) (int64, error) {
	request := &leaf.LeafServiceImpl_LeafRequest{}
	ctx, cancel := context.WithTimeout(ctx,rpcclient.Timeout)
	defer cancel()
	request.A = a
	request.JaegerTracerTraceCtx = jaegerTracer_trace_ctx
	response, err := rpcclient.client.Leaf(ctx,request)
	var ret0 int64
	if err != nil {
		return ret0,err
	}
	if ctx.Err() != nil {
		return ret0,err
	}
	ret0 = response.RetVal0
	return ret0,err
}

func (rpcclient *LeafServiceImplRPCClient) Object(ctx context.Context, obj services.LeafObject, jaegerTracer_trace_ctx string) (services.LeafObject, error) {
	request := &leaf.LeafServiceImpl_ObjectRequest{}
	ctx, cancel := context.WithTimeout(ctx,rpcclient.Timeout)
	defer cancel()
	arg1 := &leaf.LeafObject{}
	copier.Copy(arg1, &obj)
	request.Obj = arg1
	request.JaegerTracerTraceCtx = jaegerTracer_trace_ctx
	response, err := rpcclient.client.Object(ctx,request)
	ret0 := services.LeafObject{}
	if err != nil {
		return ret0,err
	}
	if ctx.Err() != nil {
		return ret0,err
	}
	copier.Copy(&ret0, response.RetVal0)
	return ret0,err
}

