// Blueprint: auto-generated by Blueprint Core
package proc3

import "spec/services"
import "log"
func GetwebService() *WebServiceImplHandler {
	jaegertracer := NewjaegerTracer()
	leafservice_leafserviceimplclientpool_fn := func()*LeafServiceImplTracerClient{
		var leafservice_leafserviceimplrpcclient_neterr error
		var leafservice_leafserviceimplrpcclient_netclient *LeafServiceImplRPCClient
		for {
			leafservice_leafserviceimplrpcclient_netclient,leafservice_leafserviceimplrpcclient_neterr = NewLeafServiceImplRPCClient()
			if leafservice_leafserviceimplrpcclient_neterr == nil{
				break
			} else {
				log.Println(leafservice_leafserviceimplrpcclient_neterr)
			}
		}
		leafservice_leafserviceimplretrier := NewLeafServiceImplRetrier(leafservice_leafserviceimplrpcclient_netclient, "5")
		leafservice_leafserviceimpltracerclient := NewLeafServiceImplTracerClient(leafservice_leafserviceimplretrier, jaegertracer, "LeafService", "1")
		return leafservice_leafserviceimpltracerclient
	}
	leafservice_leafserviceimplclientpool := NewLeafServiceImplClientpool("100", leafservice_leafserviceimplclientpool_fn)
	leafservice_leafserviceimplclient := NewLeafServiceImplClient(leafservice_leafserviceimplclientpool)
	spec_handler := services.NewWebServiceImpl(leafservice_leafserviceimplclient)
	webserviceimpl := NewWebServiceImpl(spec_handler)
	webserviceimpltracer := NewWebServiceImplTracer(webserviceimpl, jaegertracer, "WebService", "1")
	webserviceimplhealthchecker := NewWebServiceImplHealthChecker(webserviceimpltracer)
	webserviceimplhandler := NewWebServiceImplHandler(webserviceimplhealthchecker, "default")
	return webserviceimplhandler
}

func RunwebService(service *WebServiceImplHandler) error{
return service.Run()
}

