// Blueprint: auto-generated by RPCgrpc plugin
package proc1

import (
	"gen-go/leaf"
	"google.golang.org/grpc"
	"context"
	"github.com/jinzhu/copier"
	"os"
	"errors"
	"net"
	"spec/services"
)

type LeafServiceImplHandler struct {
	service *LeafServiceImplTracer
	leaf.UnimplementedLeafServiceImplServer
}
func NewLeafServiceImplHandler(old_handler *LeafServiceImplTracer,framework string,timeout string) *LeafServiceImplHandler {
	handler := &LeafServiceImplHandler{service:old_handler}
	return handler
}

func (rpchandler *LeafServiceImplHandler) Leaf(ctx context.Context, request *leaf.LeafServiceImpl_LeafRequest) (*leaf.LeafServiceImpl_LeafResponse, error) {
	ret0,ret1 := rpchandler.service.Leaf(ctx,request.A,request.JaegerTracerTraceCtx)
	response := &leaf.LeafServiceImpl_LeafResponse{}
	response.RetVal0 = ret0
	return response,ret1
}

func (rpchandler *LeafServiceImplHandler) Object(ctx context.Context, request *leaf.LeafServiceImpl_ObjectRequest) (*leaf.LeafServiceImpl_ObjectResponse, error) {
	arg1 := services.LeafObject{}
	copier.Copy(&arg1, request.Obj)
	ret0,ret1 := rpchandler.service.Object(ctx,arg1,request.JaegerTracerTraceCtx)
	ret_updated0 := &leaf.LeafObject{}
	copier.Copy(ret_updated0, &ret0)
	response := &leaf.LeafServiceImpl_ObjectResponse{}
	response.RetVal0 = ret_updated0
	return response,ret1
}

func (rpchandler *LeafServiceImplHandler) Run() error {
	addr := os.Getenv("leafService_ADDRESS")
	port := os.Getenv("leafService_PORT")
	if addr == "" || port == "" {
		return errors.New("Address or Port were not set")
	}
	lis, err := net.Listen("tcp", addr + ":" + port)
	if err != nil {
		return err
	}
	grpcServer := grpc.NewServer()
	leaf.RegisterLeafServiceImplServer(grpcServer,rpchandler)
	return grpcServer.Serve(lis)
	
}

